const Generator = require('yeoman-generator');
const mkdirp = require("mkdirp")
module.exports = class extends Generator {

    initializing() {
        this.props = new Object();
        this.errors = new Array();
    }
    prompting() {
        return this.prompt([
            {
                type: 'input',
                name: 'appName',
                message: 'Name of your Application',
                default: "dark-snow"
            },
            {
                type: 'input',
                name: 'description',
                message: 'Description for the app',
                default: "I'm generated by ds-backend"
            },
            {
                type: 'input',
                name: 'author',
                message: 'Author',
                store: true
            },
            {
                type: 'input',
                name: 'license',
                message: 'License',
                default: "ISC"
            },
            {
                type: 'list',
                choices: [
                    {
                        name: "NPM",
                        value: "npm"
                    },
                    {
                        name: "Yarn",
                        value: "yarn"
                    }
                ],
                name: 'installer',
                message: 'License',
                default: "npm"
            }]).then(e => {
                this.props = e;
            });
    }
    writing() {
        if (this.props.appName) {
            let pack = this._genPackage();
            mkdirp(this.props.appName);
            this.destinationRoot(this.props.appName);
            mkdirp('upload');
            this.fs.write("package.json", JSON.stringify(pack));
            let index = this.fs.read(__dirname + "/templates/index.js");
            this.fs.write("index.js", index);
            this.fs.copy(__dirname + "/templates/routes", "routes");
            this.fs.copy(__dirname + "/templates/modules", "modules");
            this.fs.copy(__dirname + "/templates/models", "models");
            this.fs.copy(__dirname + "/templates/public", "public");
            this.fs.copy(__dirname + "/templates/production.js", "production.js");
            this.fs.copy(__dirname + "/templates/gitignoreTemplate", ".gitignore");
        } else {
            this.errors.push("You must name your app");
        }
    }
    install() {
        let packages = ["express", "body-parser", "mongo-leaf", "leaf-auth-express","express-fileupload","dark-snow-response","pm2"];
        let devPackages = ["supervisor"]
        if (this.props.installer === 'npm') {
            this.npmInstall(packages);
            this.npmInstall(devPackages, { 'save-dev': true })
        } else {
            this.yarnInstall(packages);
            this.npmInstall(devPackages, { 'dev': true })
        }
    }

    end() {
        if (this.errors) {
            this.errors.forEach(e => console.error(e));
        }
    }


    _genPackage() {
        return {
            name: this.props.appName,
            version: "1.0.0",
            description: this.props.description,
            main: "index.js",
            scripts: {
                dev: "supervisor index.js",
                test: "echo \"Error: no test specified\" && exit 1"
            },
            author: this.props.author,
            license: this.props.license
        };
    }
};